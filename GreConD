import scipy.stats as sc
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import sklearn
import timeit
from itertools import combinations
from timeit import default_timer as timer
import copy


class GreConD:
    def __init__(self, I):   #I--boolean matrix n*m: np.int8([])
        self.I = I
        self.U = np.argwhere(I==1).tolist()
        self.m = len(I[0])
        self.n = len(I)
        self.all_column_indices = np.arange(self.m, dtype=int)
        self.concepts = None
        self.factors = None
  
    def derive_up(self, N):   #N -- set of indices from the set {0,...,n-1}
        if N.size!=0:
            intersect_rows = self.I[N[0]]    
            for x in N[1:]:
                current_row = self.I[x]
                intersect_rows = intersect_rows & current_row
            M = np.array([i for i in range(self.m) if intersect_rows[i]==1])
            return M
        else:
            return np.array([])

    def derive_down(self, M):   #M -- set of indices from the set {0,...,m-1}
        if M.size!=0:
            M = M.astype(int)
            intersect_columns = self.I[:,M[0]]
            for y in M[1:]:
                current_column = self.I[:,y]
                intersect_columns = intersect_columns & current_column
            N = np.array([i for i in range(self.n) if intersect_columns[i]==1])
            return N
        else:
            return np.array([])    

    def add_elem(self, D, y):      #direct sum operation from the algorithm
        D_union_y = np.append(D, y)
        D_1 = self.derive_down(D_union_y)
        D_2 = self.derive_up(D_1)
        if D_1.size==0 or D_2.size==0:
            return [np.array([]), 0]
        else:
            D_1_decart_D_2 = np.array(np.meshgrid(D_1, D_2)).T.reshape(-1,2)
            len_intersection_U = 0
            for i in D_1_decart_D_2:
                if i.tolist() in self.U:
                    len_intersection_U+=1
        return [D_1_decart_D_2, len_intersection_U]     
    
    def get_concepts(self):    #returns a set of factor concepts of I
        F = []
        while self.U:
            D = np.array([])
            max_len = 0
            max_len_prev = -1
            max_concept = np.array([])
            column_indices = self.all_column_indices
            while column_indices.size != 0 and max_len_prev<max_len:
                max_len_prev = max_len
                for y in column_indices:
                    D_y = self.add_elem(D, y)
                    D_1_decart_D_2  = D_y[0]
                    len_intersection_U = D_y[1]
                    if len_intersection_U>max_len:
                        max_len = len_intersection_U
                        max_concept = D_1_decart_D_2
                D = max_concept[:,1]
                column_indices = np.setdiff1d(column_indices, D)
            C = max_concept[:,0]
            C_D = [np.unique(C), np.unique(D)]
            F.append(C_D)
            self.U = [i for i in self.U if i not in max_concept.tolist()]
        self.concepts = F
        return F    

    def get_factors(self):    #returns decomposition matrices A and B
        #self.U = np.argwhere(self.I==1)
        if self.concepts==None:
            concepts = self.get_concepts()
        else:
            concepts = self.concepts
        len_c = len(concepts)
        A = np.zeros(shape=(self.n,len_c),dtype=np.int8)
        B = np.zeros(shape=(len_c,self.m),dtype=np.int8)
        for k in range(len_c):
            for i in concepts[k][0]:
                A[i][k]=1
            for j in concepts[k][1]:
                B[k][j]=1
        self.factors = [A, B]
        return [A, B]

    def multiply_factors(self):    #returns a product of decomposition matrices A and B
        #self.U = np.argwhere(self.I==1)
        if self.factors==None:
            A_B = self.get_factors()
        else:
            A_B = self.factors
        A = A_B[0]
        B= A_B[1]
        I = np.where(np.matmul(A,B)>=1, 1, 0)
        return I    
